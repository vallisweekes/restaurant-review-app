{"ast":null,"code":"var _jsxFileName = \"/Users/vallisweekes/Documents/restaurant-review-app/src/Components/ResultsContainer/MapContainer/MapContainer.jsx\";\nimport React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from \"google-maps-react\";\n\nclass MapContainer extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.Listing = ({\n      places\n    }) => {\n      {\n        places && places.map(p => React.createElement(Marker, {\n          key: p.place_id,\n          position: {\n            lat: p.geometry.location.lat,\n            lng: p.geometry.location.lng\n          },\n          name: p.name,\n          onClick: this.onIconClick,\n          icon: {\n            url: \"../../../assests/map_pin_blue.svg\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }));\n      }\n    };\n\n    this.fetchPlaces = (mapProps, map) => {\n      const google = mapProps.google;\n      console.log(google);\n      console.log(map);\n      const userLocation = new google.maps.LatLng(this.props.lat, this.props.lng);\n      const request = {\n        location: userLocation,\n        radius: \"500\",\n        type: [\"restaurant\"]\n      };\n      const service = new google.maps.places.PlacesService(map);\n      service.nearbySearch(request, getPlaces);\n\n      function getPlaces(results, status) {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          this.setState({\n            places: results\n          }); // for (var i = 0; i < results.length; i++) {\n          //   const place = results[i];\n          //   this.setPlace(place);\n          // }\n        }\n      }\n    };\n\n    this.onIconClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.state = {\n      places: [],\n      selectedPlace: {},\n      activeMarker: {},\n      showingInfoWindow: false\n    };\n    this.fetchPlaces = this.fetchPlaces.bind(this);\n    this.setPlace = this.setPlace.bind(this);\n  }\n\n  UNSAFE_componentWillMount() {}\n\n  render() {\n    return React.createElement(Map, {\n      google: this.props.google,\n      zoom: 14,\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        position: \"absolute\"\n      },\n      initialCenter: {\n        lat: this.props.lat,\n        lng: this.props.lng\n      },\n      onReady: this.fetchPlaces,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.props.restaraunts && this.props.restaraunts.map(rest => React.createElement(Marker, {\n      key: rest.place_id,\n      position: {\n        lat: rest.geometry.location.lat,\n        lng: rest.geometry.location.lng\n      },\n      name: rest.name,\n      onClick: this.onIconClick,\n      icon: {\n        url: \"../../../assests/map_pin_blue.svg\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })), React.createElement(Marker, {\n      onClick: this.onIconClick,\n      name: \"You are Here\",\n      position: {\n        lat: this.props.lat,\n        lng: this.props.lng\n      },\n      clickable: true,\n      animation: this.props.google.maps.Animation.DROP,\n      icon: {\n        url: \"../../../assests/placeholder.svg\" // This marker is 20 pixels wide by 32 pixels high.\n\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, this.state.selectedPlace.name))));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyA8Byy23oFligL0X1_WQYca0ABneIhxOow\"\n})(MapContainer);","map":{"version":3,"sources":["/Users/vallisweekes/Documents/restaurant-review-app/src/Components/ResultsContainer/MapContainer/MapContainer.jsx"],"names":["React","Component","Map","GoogleApiWrapper","Marker","InfoWindow","MapContainer","constructor","props","Listing","places","map","p","place_id","lat","geometry","location","lng","name","onIconClick","url","fetchPlaces","mapProps","google","console","log","userLocation","maps","LatLng","request","radius","type","service","PlacesService","nearbySearch","getPlaces","results","status","PlacesServiceStatus","OK","setState","marker","e","selectedPlace","activeMarker","showingInfoWindow","onClose","state","bind","setPlace","UNSAFE_componentWillMount","render","width","height","position","restaraunts","rest","Animation","DROP","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from \"google-maps-react\";\n\nclass MapContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      places: [],\n      selectedPlace: {},\n      activeMarker: {},\n\n      showingInfoWindow: false\n    };\n\n    this.fetchPlaces = this.fetchPlaces.bind(this);\n    this.setPlace = this.setPlace.bind(this);\n  }\n  UNSAFE_componentWillMount() {}\n\n  Listing = ({ places }) => {\n    {\n      places &&\n        places.map(p => (\n          <Marker\n            key={p.place_id}\n            position={{\n              lat: p.geometry.location.lat,\n              lng: p.geometry.location.lng\n            }}\n            name={p.name}\n            onClick={this.onIconClick}\n            icon={{\n              url: \"../../../assests/map_pin_blue.svg\"\n            }}\n          />\n        ));\n    }\n  };\n\n  fetchPlaces = (mapProps, map) => {\n    const { google } = mapProps;\n    console.log(google);\n    console.log(map);\n\n    const userLocation = new google.maps.LatLng(this.props.lat, this.props.lng);\n    const request = {\n      location: userLocation,\n      radius: \"500\",\n      type: [\"restaurant\"]\n    };\n\n    const service = new google.maps.places.PlacesService(map);\n    service.nearbySearch(request, getPlaces);\n\n    function getPlaces(results, status) {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        this.setState({ places: results });\n        // for (var i = 0; i < results.length; i++) {\n        //   const place = results[i];\n        //   this.setPlace(place);\n        // }\n      }\n    }\n  };\n\n  onIconClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        zoom={14}\n        style={{ width: \"100%\", height: \"100%\", position: \"absolute\" }}\n        initialCenter={{\n          lat: this.props.lat,\n          lng: this.props.lng\n        }}\n        onReady={this.fetchPlaces}\n      >\n        {this.props.restaraunts &&\n          this.props.restaraunts.map(rest => (\n            <Marker\n              key={rest.place_id}\n              position={{\n                lat: rest.geometry.location.lat,\n                lng: rest.geometry.location.lng\n              }}\n              name={rest.name}\n              onClick={this.onIconClick}\n              icon={{\n                url: \"../../../assests/map_pin_blue.svg\"\n              }}\n            />\n          ))}\n\n        <Marker\n          onClick={this.onIconClick}\n          name={\"You are Here\"}\n          position={{\n            lat: this.props.lat,\n            lng: this.props.lng\n          }}\n          clickable={true}\n          animation={this.props.google.maps.Animation.DROP}\n          icon={{\n            url: \"../../../assests/placeholder.svg\"\n            // This marker is 20 pixels wide by 32 pixels high.\n          }}\n        />\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>\n            <p>{this.state.selectedPlace.name}</p>\n          </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyA8Byy23oFligL0X1_WQYca0ABneIhxOow\"\n})(MapContainer);\n"]},"metadata":{},"sourceType":"module"}