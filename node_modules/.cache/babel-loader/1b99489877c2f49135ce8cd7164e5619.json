{"ast":null,"code":"var _jsxFileName = \"/Users/vallisweekes/Documents/restaurant-review-app/src/Components/AppContainer/AppContainer.jsx\";\nimport React, { Component } from \"react\";\nimport { GoogleApiWrapper } from \"google-maps-react\";\nimport \"./app-container.css\";\nimport { paginate } from \"../../util/paginate\";\nimport Header from \"../Header\";\nimport ResultsContainer from \"../ResultsContainer/ResultsContainer\";\nimport { getMyRestaraunts } from \"../../util/getRMyRestaurants\";\n\nclass AppContainer extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.fetchPlaces = (mapProps, map) => {\n      // const home = {\n      //   lat: 51.593299099999996,\n      //   lng: -0.1037042\n      // };\n      const google = mapProps.google;\n      const userLocation = new google.maps.LatLng(this.props.lat, this.props.lng);\n      const request = {\n        location: userLocation,\n        radius: \"900\",\n        type: [\"restaurant\"]\n      };\n      const service = new google.maps.places.PlacesService(map);\n      service.nearbySearch(request, getPlaces); // const storeRestaurants = this.storeRestaurants;\n      // let getAllResults;\n      // const getDeets = this.getDetails;\n      // const newArr = [];\n\n      function getPlaces(results, status, pagination) {\n        console.log(\"Individual Restaurants 📍\", results);\n\n        if (status === \"OK\") {\n          // const getAllResultsOfRest = [pagination.nextPage()];\n          const results = Promise.all(getAllResultsOfRest);\n          console.log(\"All Async ✨\", results); // const interval = 900;\n          // const placeId = getAllResults.map(placeResult => placeResult.place_id);\n          // placeId.forEach(id => {\n          //   setTimeout(() => {\n          //     const request = {\n          //       placeId: id,\n          //       fields: [\n          //         \"name\",\n          //         \"place_id\",\n          //         \"rating\",\n          //         \"reviews\",\n          //         \"formatted_address\"\n          //       ]\n          //     };\n          //     service.getDetails(request, getInfo);\n          //     function getInfo(results, status) {\n          //       // console.log(\"Get info function results\", results);\n          //       if (status === \"OK\") {\n          //         newArr.push(results);\n          //       }\n          //     }\n          //   }, interval);\n          //   return newArr;\n          // });\n          // console.log(\"These are my places\", placesDetails);\n          // getDeets(newArr);\n        }\n      }\n    };\n\n    this.onIconClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({// showingInfoWindow: false,\n          // activeMarker: null\n        });\n      }\n    };\n\n    this.handleRatings = () => {\n      console.log(this.state.ratings);\n    };\n\n    this.state = {\n      googleResults: [],\n      myRestaurants: getMyRestaraunts(),\n      currentPage: 1,\n      pageSize: 5,\n      ratings: [5, 4, 3, 2, 1]\n    };\n  }\n\n  componentDidMount() {\n    this.storeRestaurants = googlePlaces => {\n      console.log(\"First Initial Results All 📌\", googlePlaces);\n    }; // this.getDetails = result => {\n    //   console.log(\"Individual Restaurants 📍\", result);\n    // };\n\n  }\n\n  handleOpenNowFilter() {}\n\n  handlePageChange(page) {\n    this.setState({\n      currentPage: page\n    });\n  }\n\n  render() {\n    // const { google } = this.props;\n    const _this$state = this.state,\n          allRestaruants = _this$state.myRestaurants,\n          pageSize = _this$state.pageSize,\n          currentPage = _this$state.currentPage;\n    const restaraunts = paginate(allRestaruants, currentPage, pageSize);\n    return React.createElement(\"div\", {\n      className: \"container-fluid app__containter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"app__container-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })), React.createElement(\"main\", {\n      className: \"app__container-results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(ResultsContainer, {\n      lat: this.props.lat,\n      lng: this.props.lng,\n      fetchPlaces: this.fetchPlaces,\n      myRestaurants: restaraunts,\n      onPageChange: this.handlePageChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCcMtA-_NBxt6cD8uefrk6EFlv-2YfXtS0\"\n})(AppContainer);","map":{"version":3,"sources":["/Users/vallisweekes/Documents/restaurant-review-app/src/Components/AppContainer/AppContainer.jsx"],"names":["React","Component","GoogleApiWrapper","paginate","Header","ResultsContainer","getMyRestaraunts","AppContainer","constructor","props","fetchPlaces","mapProps","map","google","userLocation","maps","LatLng","lat","lng","request","location","radius","type","service","places","PlacesService","nearbySearch","getPlaces","results","status","pagination","console","log","Promise","all","getAllResultsOfRest","onIconClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","handleRatings","ratings","googleResults","myRestaurants","currentPage","pageSize","componentDidMount","storeRestaurants","googlePlaces","handleOpenNowFilter","handlePageChange","page","render","allRestaruants","restaraunts","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { GoogleApiWrapper } from \"google-maps-react\";\nimport \"./app-container.css\";\nimport { paginate } from \"../../util/paginate\";\nimport Header from \"../Header\";\nimport ResultsContainer from \"../ResultsContainer/ResultsContainer\";\nimport { getMyRestaraunts } from \"../../util/getRMyRestaurants\";\n\nclass AppContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      googleResults: [],\n      myRestaurants: getMyRestaraunts(),\n      currentPage: 1,\n      pageSize: 5,\n      ratings: [5, 4, 3, 2, 1]\n    };\n  }\n\n  fetchPlaces = (mapProps, map) => {\n    // const home = {\n    //   lat: 51.593299099999996,\n    //   lng: -0.1037042\n    // };\n\n    const { google } = mapProps;\n    const userLocation = new google.maps.LatLng(this.props.lat, this.props.lng);\n    const request = {\n      location: userLocation,\n      radius: \"900\",\n      type: [\"restaurant\"]\n    };\n\n    const service = new google.maps.places.PlacesService(map);\n    service.nearbySearch(request, getPlaces);\n    // const storeRestaurants = this.storeRestaurants;\n    // let getAllResults;\n    // const getDeets = this.getDetails;\n    // const newArr = [];\n    function getPlaces(results, status, pagination) {\n      console.log(\"Individual Restaurants 📍\", results);\n      if (status === \"OK\") {\n        // const getAllResultsOfRest = [pagination.nextPage()];\n\n        const results = Promise.all(getAllResultsOfRest);\n        console.log(\"All Async ✨\", results);\n        // const interval = 900;\n        // const placeId = getAllResults.map(placeResult => placeResult.place_id);\n        // placeId.forEach(id => {\n        //   setTimeout(() => {\n        //     const request = {\n        //       placeId: id,\n        //       fields: [\n        //         \"name\",\n        //         \"place_id\",\n        //         \"rating\",\n        //         \"reviews\",\n        //         \"formatted_address\"\n        //       ]\n        //     };\n        //     service.getDetails(request, getInfo);\n        //     function getInfo(results, status) {\n        //       // console.log(\"Get info function results\", results);\n        //       if (status === \"OK\") {\n        //         newArr.push(results);\n        //       }\n        //     }\n        //   }, interval);\n        //   return newArr;\n        // });\n\n        // console.log(\"These are my places\", placesDetails);\n        // getDeets(newArr);\n      }\n    }\n  };\n\n  componentDidMount() {\n    this.storeRestaurants = googlePlaces => {\n      console.log(\"First Initial Results All 📌\", googlePlaces);\n    };\n\n    // this.getDetails = result => {\n    //   console.log(\"Individual Restaurants 📍\", result);\n    // };\n  }\n\n  onIconClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        // showingInfoWindow: false,\n        // activeMarker: null\n      });\n    }\n  };\n\n  handleRatings = () => {\n    console.log(this.state.ratings);\n  };\n\n  handleOpenNowFilter() {}\n\n  handlePageChange(page) {\n    this.setState({\n      currentPage: page\n    });\n  }\n\n  render() {\n    // const { google } = this.props;\n\n    const { myRestaurants: allRestaruants, pageSize, currentPage } = this.state;\n\n    const restaraunts = paginate(allRestaruants, currentPage, pageSize);\n\n    return (\n      <div className=\"container-fluid app__containter\">\n        <header className=\"app__container-header\">\n          <Header />\n        </header>\n        <main className=\"app__container-results\">\n          <ResultsContainer\n            lat={this.props.lat}\n            lng={this.props.lng}\n            fetchPlaces={this.fetchPlaces}\n            myRestaurants={restaraunts}\n            onPageChange={this.handlePageChange}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCcMtA-_NBxt6cD8uefrk6EFlv-2YfXtS0\"\n})(AppContainer);\n"]},"metadata":{},"sourceType":"module"}