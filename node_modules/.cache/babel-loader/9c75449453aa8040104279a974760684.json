{"ast":null,"code":"var _jsxFileName = \"/Users/vallisweekes/Documents/restaurant-review-app/src/Components/AppContainer/AppContainer.jsx\";\nimport React, { Component } from \"react\";\nimport { GoogleApiWrapper } from \"google-maps-react\";\nimport \"./app-container.css\";\nimport { paginate } from \"../../util/paginate\";\nimport Header from \"../Header\";\nimport ResultsContainer from \"../ResultsContainer/ResultsContainer\";\nimport { getMyRestaraunts } from \"../../util/getRMyRestaurants\";\n\nclass AppContainer extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.fetchPlaces = (mapProps, map) => {\n      // const home = {\n      //   lat: 51.593299099999996,\n      //   lng: -0.1037042\n      // };\n      const gPlaces = [];\n      const newResults = [];\n      const google = mapProps.google;\n      const userLocation = new google.maps.LatLng(this.props.lat, this.props.lng);\n      const request = {\n        location: userLocation,\n        radius: \"900\",\n        type: [\"restaurant\"]\n      };\n      const service = new google.maps.places.PlacesService(map);\n      service.nearbySearch(request, getPlaces);\n      const storeRestaurants = this.storeRestaurants;\n\n      async function getPlaces(results, status, pagination) {\n        if (status === \"OK\") {\n          pagination.nextPage();\n          await gPlaces.push(...results);\n          const interval = 300;\n          const placeId = gPlaces.map(placeResult => placeResult.place_id);\n          placeId.forEach((id, index) => {\n            setTimeout(() => {\n              const request = {\n                placeId: id,\n                fields: [\"name\", \"place_id\", \"rating\", \"reviews\", \"formatted_address\"]\n              };\n              service.getDetails(request, getInfo);\n\n              async function getInfo(results, status) {\n                if (status === google.maps.places.PlacesServiceStatus.OK) {\n                  await newResults.push(results);\n                }\n              }\n            }, interval * index);\n            storeRestaurants(newResults);\n          });\n        }\n      } // console.log(\"new results\", );\n\n    };\n\n    this.onIconClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({// showingInfoWindow: false,\n          // activeMarker: null\n        });\n      }\n    };\n\n    this.handleRatings = () => {\n      console.log(this.state.ratings);\n    };\n\n    this.state = {\n      allRestaurantResults: [],\n      currentPage: 1,\n      pageSize: 5,\n      ratings: [5, 4, 3, 2, 1]\n    };\n  }\n\n  componentDidMount() {\n    this.storeRestaurants = googlePlaces => {\n      this.setState({\n        allRestaurantResults: [...googlePlaces, ...getMyRestaraunts()]\n      });\n    };\n  }\n\n  handleOpenNowFilter() {}\n\n  handlePageChange(page) {\n    this.setState({\n      currentPage: page\n    });\n  }\n\n  render() {\n    // const { google } = this.props;\n    console.log(\"My States\", this.state);\n    const _this$state = this.state,\n          allRestaruants = _this$state.myRestaurants,\n          pageSize = _this$state.pageSize,\n          currentPage = _this$state.currentPage;\n    const restaraunts = paginate(allRestaruants, currentPage, pageSize);\n    return React.createElement(\"div\", {\n      className: \"container-fluid app__containter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"app__container-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })), React.createElement(\"main\", {\n      className: \"app__container-results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(ResultsContainer, {\n      lat: this.props.lat,\n      lng: this.props.lng,\n      fetchPlaces: this.fetchPlaces,\n      myRestaurants: allRestaruants,\n      onPageChange: this.handlePageChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCcMtA-_NBxt6cD8uefrk6EFlv-2YfXtS0\"\n})(AppContainer);","map":{"version":3,"sources":["/Users/vallisweekes/Documents/restaurant-review-app/src/Components/AppContainer/AppContainer.jsx"],"names":["React","Component","GoogleApiWrapper","paginate","Header","ResultsContainer","getMyRestaraunts","AppContainer","constructor","props","fetchPlaces","mapProps","map","gPlaces","newResults","google","userLocation","maps","LatLng","lat","lng","request","location","radius","type","service","places","PlacesService","nearbySearch","getPlaces","storeRestaurants","results","status","pagination","nextPage","push","interval","placeId","placeResult","place_id","forEach","id","index","setTimeout","fields","getDetails","getInfo","PlacesServiceStatus","OK","onIconClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","handleRatings","console","log","ratings","allRestaurantResults","currentPage","pageSize","componentDidMount","googlePlaces","handleOpenNowFilter","handlePageChange","page","render","allRestaruants","myRestaurants","restaraunts","apiKey"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,OAAO,qBAAP;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;;AAEA,MAAMC,YAAN,SAA2BN,SAA3B,CAAqC;AACnCO,EAAAA,WAAW,CAACC,MAAD,EAAQ;AACjB,UAAMA,MAAN;;AADiB,SAUnBC,WAVmB,GAUL,CAACC,QAAD,EAAWC,GAAX,KAAmB;AAC/B;AACA;AACA;AACA;AACA,YAAMC,OAAO,GAAG,EAAhB;AACA,YAAMC,UAAU,GAAG,EAAnB;AAN+B,YAOvBC,MAPuB,GAOZJ,QAPY,CAOvBI,MAPuB;AAQ/B,YAAMC,YAAY,GAAG,IAAID,MAAM,CAACE,IAAP,CAAYC,MAAhB,CAAuB,KAAKT,KAAL,CAAWU,GAAlC,EAAuC,KAAKV,KAAL,CAAWW,GAAlD,CAArB;AACA,YAAMC,OAAO,GAAG;AACdC,QAAAA,QAAQ,EAAEN,YADI;AAEdO,QAAAA,MAAM,EAAE,KAFM;AAGdC,QAAAA,IAAI,EAAE,CAAC,YAAD;AAHQ,OAAhB;AAMA,YAAMC,OAAO,GAAG,IAAIV,MAAM,CAACE,IAAP,CAAYS,MAAZ,CAAmBC,aAAvB,CAAqCf,GAArC,CAAhB;AACAa,MAAAA,OAAO,CAACG,YAAR,CAAqBP,OAArB,EAA8BQ,SAA9B;AACA,YAAMC,gBAAgB,GAAG,KAAKA,gBAA9B;;AAEA,qBAAeD,SAAf,CAAyBE,OAAzB,EAAkCC,MAAlC,EAA0CC,UAA1C,EAAsD;AACpD,YAAID,MAAM,KAAK,IAAf,EAAqB;AACnBC,UAAAA,UAAU,CAACC,QAAX;AACA,gBAAMrB,OAAO,CAACsB,IAAR,CAAa,GAAGJ,OAAhB,CAAN;AAEA,gBAAMK,QAAQ,GAAG,GAAjB;AACA,gBAAMC,OAAO,GAAGxB,OAAO,CAACD,GAAR,CAAY0B,WAAW,IAAIA,WAAW,CAACC,QAAvC,CAAhB;AAEAF,UAAAA,OAAO,CAACG,OAAR,CAAgB,CAACC,EAAD,EAAKC,KAAL,KAAe;AAC7BC,YAAAA,UAAU,CAAC,MAAM;AACf,oBAAMtB,OAAO,GAAG;AACdgB,gBAAAA,OAAO,EAAEI,EADK;AAEdG,gBAAAA,MAAM,EAAE,CACN,MADM,EAEN,UAFM,EAGN,QAHM,EAIN,SAJM,EAKN,mBALM;AAFM,eAAhB;AAUAnB,cAAAA,OAAO,CAACoB,UAAR,CAAmBxB,OAAnB,EAA4ByB,OAA5B;;AACA,6BAAeA,OAAf,CAAuBf,OAAvB,EAAgCC,MAAhC,EAAwC;AACtC,oBAAIA,MAAM,KAAKjB,MAAM,CAACE,IAAP,CAAYS,MAAZ,CAAmBqB,mBAAnB,CAAuCC,EAAtD,EAA0D;AACxD,wBAAMlC,UAAU,CAACqB,IAAX,CAAgBJ,OAAhB,CAAN;AACD;AACF;AACF,aAjBS,EAiBPK,QAAQ,GAAGM,KAjBJ,CAAV;AAkBAZ,YAAAA,gBAAgB,CAAChB,UAAD,CAAhB;AACD,WApBD;AAqBD;AACF,OAjD8B,CAmD/B;;AACD,KA9DkB;;AAAA,SAgEnBmC,WAhEmB,GAgEL,CAACxC,KAAD,EAAQyC,MAAR,EAAgBC,CAAhB,KACZ,KAAKC,QAAL,CAAc;AACZC,MAAAA,aAAa,EAAE5C,KADH;AAEZ6C,MAAAA,YAAY,EAAEJ,MAFF;AAGZK,MAAAA,iBAAiB,EAAE;AAHP,KAAd,CAjEiB;;AAAA,SAuEnBC,OAvEmB,GAuET/C,KAAK,IAAI;AACjB,UAAI,KAAKgD,KAAL,CAAWF,iBAAf,EAAkC;AAChC,aAAKH,QAAL,CAAc,CACZ;AACA;AAFY,SAAd;AAID;AACF,KA9EkB;;AAAA,SAgFnBM,aAhFmB,GAgFH,MAAM;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWI,OAAvB;AACD,KAlFkB;;AAEjB,SAAKJ,KAAL,GAAa;AACXK,MAAAA,oBAAoB,EAAE,EADX;AAEXC,MAAAA,WAAW,EAAE,CAFF;AAGXC,MAAAA,QAAQ,EAAE,CAHC;AAIXH,MAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb;AAJE,KAAb;AAMD;;AA4EDI,EAAAA,iBAAiB,GAAG;AAClB,SAAKnC,gBAAL,GAAwBoC,YAAY,IAAI;AACtC,WAAKd,QAAL,CAAc;AACZU,QAAAA,oBAAoB,EAAE,CAAC,GAAGI,YAAJ,EAAkB,GAAG5D,gBAAgB,EAArC;AADV,OAAd;AAGD,KAJD;AAKD;;AAED6D,EAAAA,mBAAmB,GAAG,CAAE;;AAExBC,EAAAA,gBAAgB,CAACC,IAAD,EAAO;AACrB,SAAKjB,QAAL,CAAc;AACZW,MAAAA,WAAW,EAAEM;AADD,KAAd;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB,KAAKH,KAA9B;AAFO,wBAI0D,KAAKA,KAJ/D;AAAA,UAIgBc,cAJhB,eAICC,aAJD;AAAA,UAIgCR,QAJhC,eAIgCA,QAJhC;AAAA,UAI0CD,WAJ1C,eAI0CA,WAJ1C;AAMP,UAAMU,WAAW,GAAGtE,QAAQ,CAACoE,cAAD,EAAiBR,WAAjB,EAA8BC,QAA9B,CAA5B;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,SAAS,EAAC,uBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAIE;AAAM,MAAA,SAAS,EAAC,wBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AACE,MAAA,GAAG,EAAE,KAAKvD,KAAL,CAAWU,GADlB;AAEE,MAAA,GAAG,EAAE,KAAKV,KAAL,CAAWW,GAFlB;AAGE,MAAA,WAAW,EAAE,KAAKV,WAHpB;AAIE,MAAA,aAAa,EAAE6D,cAJjB;AAKE,MAAA,YAAY,EAAE,KAAKH,gBALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJF,CADF;AAgBD;;AA7HkC;;AAgIrC,eAAelE,gBAAgB,CAAC;AAC9BwE,EAAAA,MAAM,EAAE;AADsB,CAAD,CAAhB,CAEZnE,YAFY,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { GoogleApiWrapper } from \"google-maps-react\";\nimport \"./app-container.css\";\nimport { paginate } from \"../../util/paginate\";\nimport Header from \"../Header\";\nimport ResultsContainer from \"../ResultsContainer/ResultsContainer\";\nimport { getMyRestaraunts } from \"../../util/getRMyRestaurants\";\n\nclass AppContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allRestaurantResults: [],\n      currentPage: 1,\n      pageSize: 5,\n      ratings: [5, 4, 3, 2, 1]\n    };\n  }\n\n  fetchPlaces = (mapProps, map) => {\n    // const home = {\n    //   lat: 51.593299099999996,\n    //   lng: -0.1037042\n    // };\n    const gPlaces = [];\n    const newResults = [];\n    const { google } = mapProps;\n    const userLocation = new google.maps.LatLng(this.props.lat, this.props.lng);\n    const request = {\n      location: userLocation,\n      radius: \"900\",\n      type: [\"restaurant\"]\n    };\n\n    const service = new google.maps.places.PlacesService(map);\n    service.nearbySearch(request, getPlaces);\n    const storeRestaurants = this.storeRestaurants;\n\n    async function getPlaces(results, status, pagination) {\n      if (status === \"OK\") {\n        pagination.nextPage();\n        await gPlaces.push(...results);\n\n        const interval = 300;\n        const placeId = gPlaces.map(placeResult => placeResult.place_id);\n\n        placeId.forEach((id, index) => {\n          setTimeout(() => {\n            const request = {\n              placeId: id,\n              fields: [\n                \"name\",\n                \"place_id\",\n                \"rating\",\n                \"reviews\",\n                \"formatted_address\"\n              ]\n            };\n            service.getDetails(request, getInfo);\n            async function getInfo(results, status) {\n              if (status === google.maps.places.PlacesServiceStatus.OK) {\n                await newResults.push(results);\n              }\n            }\n          }, interval * index);\n          storeRestaurants(newResults);\n        });\n      }\n    }\n\n    // console.log(\"new results\", );\n  };\n\n  onIconClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        // showingInfoWindow: false,\n        // activeMarker: null\n      });\n    }\n  };\n\n  handleRatings = () => {\n    console.log(this.state.ratings);\n  };\n\n  componentDidMount() {\n    this.storeRestaurants = googlePlaces => {\n      this.setState({\n        allRestaurantResults: [...googlePlaces, ...getMyRestaraunts()]\n      });\n    };\n  }\n\n  handleOpenNowFilter() {}\n\n  handlePageChange(page) {\n    this.setState({\n      currentPage: page\n    });\n  }\n\n  render() {\n    // const { google } = this.props;\n    console.log(\"My States\", this.state);\n\n    const { myRestaurants: allRestaruants, pageSize, currentPage } = this.state;\n\n    const restaraunts = paginate(allRestaruants, currentPage, pageSize);\n\n    return (\n      <div className=\"container-fluid app__containter\">\n        <header className=\"app__container-header\">\n          <Header />\n        </header>\n        <main className=\"app__container-results\">\n          <ResultsContainer\n            lat={this.props.lat}\n            lng={this.props.lng}\n            fetchPlaces={this.fetchPlaces}\n            myRestaurants={allRestaruants}\n            onPageChange={this.handlePageChange}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCcMtA-_NBxt6cD8uefrk6EFlv-2YfXtS0\"\n})(AppContainer);\n"]},"metadata":{},"sourceType":"module"}