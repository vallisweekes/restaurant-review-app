{"ast":null,"code":"var _jsxFileName = \"/Users/vallisweekes/Documents/restaurant-review-app/src/Components/ResultsContainer/MapContainer/MapContainer.jsx\";\nimport React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from \"google-maps-react\";\n\nclass MapContainer extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onIconClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.state = {\n      selectedPlace: {},\n      activeMarker: {},\n      showingInfoWindow: false\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    console.log(this.props);\n    const request = {\n      location: {\n        lat: this.props.lat,\n        lng: this.props.lng\n      },\n      radius: \"500\",\n      type: [\"restaurant\"]\n    };\n    console.log(request);\n    const places = this.props.google.maps.places;\n    const service = places.PlacesService;\n    service.prototype.nearbySearch(request, getPlaces);\n\n    function getPlaces(results, status) {\n      if (status === places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          const place = results[i];\n          console.log(place);\n        }\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(Map, {\n      google: this.props.google,\n      zoom: 14,\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        position: \"absolute\"\n      },\n      initialCenter: {\n        lat: this.props.lat,\n        lng: this.props.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, this.props.restaraunts && this.props.restaraunts.map(rest => React.createElement(Marker, {\n      key: rest.place_id,\n      position: {\n        lat: rest.geometry.location.lat,\n        lng: rest.geometry.location.lng\n      },\n      name: rest.name,\n      onClick: this.onIconClick,\n      icon: {\n        url: \"../../../assests/map_pin_blue.svg\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })), React.createElement(Marker, {\n      onClick: this.onIconClick,\n      name: \"You are Here\",\n      position: {\n        lat: this.props.lat,\n        lng: this.props.lng\n      },\n      clickable: true // animation={this.props.google.maps.Animation.DROP}\n      ,\n      icon: {\n        url: \"../../../assests/placeholder.svg\" // This marker is 20 pixels wide by 32 pixels high.\n\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.state.selectedPlace.name))));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyA8Byy23oFligL0X1_WQYca0ABneIhxOow\"\n})(MapContainer);","map":{"version":3,"sources":["/Users/vallisweekes/Documents/restaurant-review-app/src/Components/ResultsContainer/MapContainer/MapContainer.jsx"],"names":["React","Component","Map","GoogleApiWrapper","Marker","InfoWindow","MapContainer","constructor","props","onIconClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","UNSAFE_componentWillMount","console","log","request","location","lat","lng","radius","type","places","google","maps","service","PlacesService","prototype","nearbySearch","getPlaces","results","status","PlacesServiceStatus","OK","i","length","place","render","width","height","position","restaraunts","map","rest","place_id","geometry","name","url","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from \"google-maps-react\";\n\nclass MapContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedPlace: {},\n      activeMarker: {},\n      showingInfoWindow: false\n    };\n  }\n  UNSAFE_componentWillMount() {\n    console.log(this.props);\n    const request = {\n      location: {\n        lat: this.props.lat,\n        lng: this.props.lng\n      },\n      radius: \"500\",\n      type: [\"restaurant\"]\n    };\n    console.log(request);\n    const { places } = this.props.google.maps;\n    const service = places.PlacesService;\n    service.prototype.nearbySearch(request, getPlaces);\n    function getPlaces(results, status) {\n      if (status === places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          const place = results[i];\n          console.log(place);\n        }\n      }\n    }\n  }\n\n  onIconClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        zoom={14}\n        style={{ width: \"100%\", height: \"100%\", position: \"absolute\" }}\n        initialCenter={{\n          lat: this.props.lat,\n          lng: this.props.lng\n        }}\n      >\n        {this.props.restaraunts &&\n          this.props.restaraunts.map(rest => (\n            <Marker\n              key={rest.place_id}\n              position={{\n                lat: rest.geometry.location.lat,\n                lng: rest.geometry.location.lng\n              }}\n              name={rest.name}\n              onClick={this.onIconClick}\n              icon={{\n                url: \"../../../assests/map_pin_blue.svg\"\n              }}\n            />\n          ))}\n\n        <Marker\n          onClick={this.onIconClick}\n          name={\"You are Here\"}\n          position={{\n            lat: this.props.lat,\n            lng: this.props.lng\n          }}\n          clickable={true}\n          // animation={this.props.google.maps.Animation.DROP}\n          icon={{\n            url: \"../../../assests/placeholder.svg\"\n            // This marker is 20 pixels wide by 32 pixels high.\n          }}\n        />\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>\n            <p>{this.state.selectedPlace.name}</p>\n          </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyA8Byy23oFligL0X1_WQYca0ABneIhxOow\"\n})(MapContainer);\n"]},"metadata":{},"sourceType":"module"}