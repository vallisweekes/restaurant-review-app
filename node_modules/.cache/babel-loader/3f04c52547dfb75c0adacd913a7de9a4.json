{"ast":null,"code":"var _jsxFileName = \"/Users/vallisweekes/Documents/restaurant-review-app/src/Components/AppContainer/AppContainer.jsx\";\nimport React, { Component } from \"react\";\nimport { GoogleApiWrapper } from \"google-maps-react\";\nimport \"./app-container.css\";\nimport { paginate } from \"../../util/paginate\";\nimport Header from \"../Header\";\nimport ResultsContainer from \"../ResultsContainer/ResultsContainer\";\nimport { getMyRestaraunts } from \"../../util/getRMyRestaurants\";\n\nclass AppContainer extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.fetchPlaces = (mapProps, map) => {\n      // const home = {\n      //   lat: 51.593299099999996,\n      //   lng: -0.1037042\n      // };\n      const newResults = [];\n      const google = mapProps.google;\n      const userLocation = new google.maps.LatLng(this.props.lat, this.props.lng);\n      const request = {\n        location: userLocation,\n        radius: \"900\",\n        type: [\"restaurant\"]\n      };\n      const service = new google.maps.places.PlacesService(map);\n      service.nearbySearch(request, getPlaces);\n      const storeRestaurants = this.storeRestaurants;\n\n      async function getPlaces(results, status, pagination) {\n        if (status === \"OK\") {\n          pagination.nextPage();\n          const getAllResults = await Promise.all([...results, ...results, ...results]);\n          console.log(\"From Promises All\", getAllResults);\n          storeRestaurants(getAllResults);\n          const interval = 1000;\n          const placeId = getAllResults.map(placeResult => placeResult.place_id);\n          console.log(\"My Place ID\", placeId);\n          placeId.forEach((id, index) => {\n            setTimeout(() => {\n              const request = {\n                placeId: id,\n                fields: [\"name\", \"place_id\", \"rating\", \"reviews\", \"formatted_address\"]\n              };\n              service.getDetails(request, getInfo);\n\n              async function getInfo(results, status) {\n                console.log(\"Get Details Status and result\", results, status);\n\n                if (status === \"OK\") {\n                  await newResults.push(results);\n                }\n              }\n            }, interval * index);\n          });\n        }\n      }\n\n      const finalTotal = newResults.map(res => {\n        return {\n          name: res.name,\n          ratings: res.rating\n        };\n      });\n      console.log(\"Here we go\", finalTotal);\n    };\n\n    this.onIconClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({// showingInfoWindow: false,\n          // activeMarker: null\n        });\n      }\n    };\n\n    this.handleRatings = () => {\n      console.log(this.state.ratings);\n    };\n\n    this.state = {\n      googleResults: [],\n      myRestaurants: getMyRestaraunts(),\n      currentPage: 1,\n      pageSize: 5,\n      ratings: [5, 4, 3, 2, 1]\n    };\n  }\n\n  componentDidMount() {\n    this.storeRestaurants = googlePlaces => {\n      console.log(\"what is this \", googlePlaces);\n    };\n  }\n\n  handleOpenNowFilter() {}\n\n  handlePageChange(page) {\n    this.setState({\n      currentPage: page\n    });\n  }\n\n  render() {\n    // const { google } = this.props;\n    const _this$state = this.state,\n          allRestaruants = _this$state.myRestaurants,\n          pageSize = _this$state.pageSize,\n          currentPage = _this$state.currentPage;\n    const restaraunts = paginate(allRestaruants, currentPage, pageSize);\n    return React.createElement(\"div\", {\n      className: \"container-fluid app__containter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"app__container-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })), React.createElement(\"main\", {\n      className: \"app__container-results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(ResultsContainer, {\n      lat: this.props.lat,\n      lng: this.props.lng,\n      fetchPlaces: this.fetchPlaces,\n      myRestaurants: restaraunts,\n      onPageChange: this.handlePageChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCcMtA-_NBxt6cD8uefrk6EFlv-2YfXtS0\"\n})(AppContainer);","map":{"version":3,"sources":["/Users/vallisweekes/Documents/restaurant-review-app/src/Components/AppContainer/AppContainer.jsx"],"names":["React","Component","GoogleApiWrapper","paginate","Header","ResultsContainer","getMyRestaraunts","AppContainer","constructor","props","fetchPlaces","mapProps","map","newResults","google","userLocation","maps","LatLng","lat","lng","request","location","radius","type","service","places","PlacesService","nearbySearch","getPlaces","storeRestaurants","results","status","pagination","nextPage","getAllResults","Promise","all","console","log","interval","placeId","placeResult","place_id","forEach","id","index","setTimeout","fields","getDetails","getInfo","push","finalTotal","res","name","ratings","rating","onIconClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","handleRatings","googleResults","myRestaurants","currentPage","pageSize","componentDidMount","googlePlaces","handleOpenNowFilter","handlePageChange","page","render","allRestaruants","restaraunts","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { GoogleApiWrapper } from \"google-maps-react\";\nimport \"./app-container.css\";\nimport { paginate } from \"../../util/paginate\";\nimport Header from \"../Header\";\nimport ResultsContainer from \"../ResultsContainer/ResultsContainer\";\nimport { getMyRestaraunts } from \"../../util/getRMyRestaurants\";\n\nclass AppContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      googleResults: [],\n      myRestaurants: getMyRestaraunts(),\n      currentPage: 1,\n      pageSize: 5,\n      ratings: [5, 4, 3, 2, 1]\n    };\n  }\n\n  fetchPlaces = (mapProps, map) => {\n    // const home = {\n    //   lat: 51.593299099999996,\n    //   lng: -0.1037042\n    // };\n\n    const newResults = [];\n    const { google } = mapProps;\n    const userLocation = new google.maps.LatLng(this.props.lat, this.props.lng);\n    const request = {\n      location: userLocation,\n      radius: \"900\",\n      type: [\"restaurant\"]\n    };\n\n    const service = new google.maps.places.PlacesService(map);\n    service.nearbySearch(request, getPlaces);\n    const storeRestaurants = this.storeRestaurants;\n    async function getPlaces(results, status, pagination) {\n      if (status === \"OK\") {\n        pagination.nextPage();\n        const getAllResults = await Promise.all([\n          ...results,\n          ...results,\n          ...results\n        ]);\n        console.log(\"From Promises All\", getAllResults);\n\n        storeRestaurants(getAllResults);\n        const interval = 1000;\n        const placeId = getAllResults.map(placeResult => placeResult.place_id);\n        console.log(\"My Place ID\", placeId);\n        placeId.forEach((id, index) => {\n          setTimeout(() => {\n            const request = {\n              placeId: id,\n              fields: [\n                \"name\",\n                \"place_id\",\n                \"rating\",\n                \"reviews\",\n                \"formatted_address\"\n              ]\n            };\n            service.getDetails(request, getInfo);\n            async function getInfo(results, status) {\n              console.log(\"Get Details Status and result\", results, status);\n              if (status === \"OK\") {\n                await newResults.push(results);\n              }\n            }\n          }, interval * index);\n        });\n      }\n    }\n\n    const finalTotal = newResults.map(res => {\n      return {\n        name: res.name,\n        ratings: res.rating\n      };\n    });\n    console.log(\"Here we go\", finalTotal);\n  };\n\n  componentDidMount() {\n    this.storeRestaurants = googlePlaces => {\n      console.log(\"what is this \", googlePlaces);\n    };\n  }\n\n  onIconClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        // showingInfoWindow: false,\n        // activeMarker: null\n      });\n    }\n  };\n\n  handleRatings = () => {\n    console.log(this.state.ratings);\n  };\n\n  handleOpenNowFilter() {}\n\n  handlePageChange(page) {\n    this.setState({\n      currentPage: page\n    });\n  }\n\n  render() {\n    // const { google } = this.props;\n\n    const { myRestaurants: allRestaruants, pageSize, currentPage } = this.state;\n\n    const restaraunts = paginate(allRestaruants, currentPage, pageSize);\n\n    return (\n      <div className=\"container-fluid app__containter\">\n        <header className=\"app__container-header\">\n          <Header />\n        </header>\n        <main className=\"app__container-results\">\n          <ResultsContainer\n            lat={this.props.lat}\n            lng={this.props.lng}\n            fetchPlaces={this.fetchPlaces}\n            myRestaurants={restaraunts}\n            onPageChange={this.handlePageChange}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCcMtA-_NBxt6cD8uefrk6EFlv-2YfXtS0\"\n})(AppContainer);\n"]},"metadata":{},"sourceType":"module"}