{"ast":null,"code":"var _jsxFileName = \"/Users/sid/sahib/oc/restaurant-review-app/src/Components/AppContainer/index.js\";\nimport React from \"react\";\nimport { Map, GoogleApiWrapper } from \"google-maps-react\";\nimport AppContainer from \"./AppContainer\";\nexport default class Container extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addRestaurants = toAddRestaurants => {\n      const restaurants = this.state.restaurants;\n      this.setState({\n        restaurants: [...restaurants, ...toAddRestaurants]\n      });\n    };\n\n    this.allRestaurantsLoaded = (google, map) => {\n      // SAHIB: Once all restaurants are loaded, we shall get reviews for them (call AllPlaces functinon)\n      const restaurants = this.state.restaurants;\n      console.log('restaurants length', restaurants.length);\n      const placeIds = restaurants.map(res => {\n        return res.place_id;\n      });\n      this.allPLaces(google, map, placeIds);\n    };\n\n    this.addReviews = (restaurantId, reviews) => {\n      this.setState({\n        reviews: [...this.state.reviews, {\n          restaurantId: reviews\n        }]\n      });\n    };\n\n    this.allPLaces = (google, map, placeIds) => {\n      const addReviews = this.addReviews;\n      console.log('placeIds', placeIds);\n      placeIds.map((Id, i) => {\n        const request = {\n          placeId: \"\".concat(Id),\n          fields: [\"name\", \"place_id\", \"rating\", \"reviews\", \"formatted_address\"]\n        };\n        setTimeout(() => {\n          const service = new google.maps.places.PlacesService(map);\n          service.getDetails(request, getInfo);\n\n          function getInfo(results, status) {\n            console.log('status', status);\n\n            if (status === \"OK\") {\n              addReviews(Id, results);\n            }\n          }\n        }, 1500);\n        return Id;\n      });\n    };\n\n    this.state = {\n      restaurants: [],\n      reviews: []\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          lat = _this$props.lat,\n          lng = _this$props.lng;\n    const _this$state = this.state,\n          restaurants = _this$state.restaurants,\n          reviews = _this$state.reviews;\n    console.log('restaurants, reviews', restaurants, reviews);\n    return React.createElement(AppContainer, {\n      lat: lat,\n      lng: lng,\n      addRestaurants: this.addRestaurants,\n      allRestaurantsLoaded: this.allRestaurantsLoaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/sid/sahib/oc/restaurant-review-app/src/Components/AppContainer/index.js"],"names":["React","Map","GoogleApiWrapper","AppContainer","Container","Component","constructor","props","addRestaurants","toAddRestaurants","restaurants","state","setState","allRestaurantsLoaded","google","map","console","log","length","placeIds","res","place_id","allPLaces","addReviews","restaurantId","reviews","Id","i","request","placeId","fields","setTimeout","service","maps","places","PlacesService","getDetails","getInfo","results","status","render","lat","lng"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Map, GoogleApiWrapper } from \"google-maps-react\";\nimport AppContainer from \"./AppContainer\";\n\n\nexport default class Container extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      restaurants: [],\n      reviews: []\n    }\n  }\n\n  addRestaurants = (toAddRestaurants) => {\n    const { restaurants } = this.state;\n\n    this.setState({\n      restaurants: [...restaurants, ...toAddRestaurants]\n    });\n  }\n\n  allRestaurantsLoaded = (google, map) => {\n    // SAHIB: Once all restaurants are loaded, we shall get reviews for them (call AllPlaces functinon)\n    const { restaurants } = this.state;\n    console.log('restaurants length', restaurants.length)\n    const placeIds = restaurants.map(res => {\n        return res.place_id;\n      });\n\n    this.allPLaces(google, map,placeIds);\n  }\n\n  addReviews = (restaurantId, reviews) => {\n\n    this.setState({\n      reviews: [...this.state.reviews, {restaurantId: reviews}]\n    });\n  }\n\n  allPLaces = (google, map, placeIds) => {\n    const addReviews = this.addReviews;\n    console.log('placeIds', placeIds);\n\n    placeIds.map((Id, i) => {\n      const request = {\n        placeId: `${Id}`,\n        fields: [\"name\", \"place_id\", \"rating\", \"reviews\", \"formatted_address\"]\n      };\n      setTimeout(() => {\n        const service = new google.maps.places.PlacesService(map);\n        service.getDetails(request, getInfo);\n\n        function getInfo(results, status) {\n          console.log('status', status)\n          if (status === \"OK\") {\n            addReviews(Id, results);\n          }\n        }\n      }, 1500);\n\n      return Id;\n    });\n  }\n\n  render() {\n    const { lat, lng } = this.props;\n    const { restaurants, reviews } = this.state;\n\n    console.log('restaurants, reviews', restaurants, reviews);\n\n    return <AppContainer\n            lat={lat}\n            lng={lng} \n            addRestaurants={this.addRestaurants}\n            allRestaurantsLoaded={this.allRestaurantsLoaded}\n      />;\n  }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}