{"ast":null,"code":"var _jsxFileName = \"/Users/vallisweekes/Documents/restaurant-review-app/src/Components/ResultsContainer/MapContainer/MapContainer.jsx\";\nimport React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from \"google-maps-react\";\n\nclass MapContainer extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.fetchPlaces = (mapProps, map) => {\n      const google = mapProps.google;\n      console.log(google);\n      console.log(map);\n      const userLocation = new google.maps.LatLng(this.props.lat, this.props.lng);\n      const request = {\n        location: userLocation,\n        radius: \"500\",\n        type: [\"restaurant\"]\n      };\n      const service = new google.maps.places.PlacesService(map);\n      service.nearbySearch(request, getPlaces);\n      let place;\n\n      function getPlaces(results, status) {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          place = Array.from(results);\n          place.map((res, i) => React.createElement(Marker, {\n            key: res.place_id,\n            position: {\n              lat: res.geometry.location.lat,\n              lng: res.geometry.location.lng\n            },\n            name: res.name,\n            icon: {\n              url: \"../../../assests/map_pin_blue.svg\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38\n            },\n            __self: this\n          }));\n        }\n      }\n    };\n\n    this.onIconClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.state = {\n      selectedPlace: {},\n      activeMarker: {},\n      showingInfoWindow: false\n    };\n    this.fetchPlaces = this.fetchPlaces.bind(this);\n  }\n\n  UNSAFE_componentWillMount() {}\n\n  render() {\n    return React.createElement(Map, {\n      google: this.props.google,\n      zoom: 14,\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        position: \"absolute\"\n      },\n      initialCenter: {\n        lat: this.props.lat,\n        lng: this.props.lng\n      },\n      onReady: this.fetchPlaces,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, this.fetchPlaces, React.createElement(Marker, {\n      onClick: this.onIconClick,\n      name: \"You are Here\",\n      position: {\n        lat: this.props.lat,\n        lng: this.props.lng\n      },\n      clickable: true,\n      animation: this.props.google.maps.Animation.DROP,\n      icon: {\n        url: \"../../../assests/placeholder.svg\" // This marker is 20 pixels wide by 32 pixels high.\n\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.selectedPlace.name))));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyA8Byy23oFligL0X1_WQYca0ABneIhxOow\"\n})(MapContainer);","map":{"version":3,"sources":["/Users/vallisweekes/Documents/restaurant-review-app/src/Components/ResultsContainer/MapContainer/MapContainer.jsx"],"names":["React","Component","Map","GoogleApiWrapper","Marker","InfoWindow","MapContainer","constructor","props","fetchPlaces","mapProps","map","google","console","log","userLocation","maps","LatLng","lat","lng","request","location","radius","type","service","places","PlacesService","nearbySearch","getPlaces","place","results","status","PlacesServiceStatus","OK","Array","from","res","i","place_id","geometry","name","url","onIconClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","bind","UNSAFE_componentWillMount","render","width","height","position","Animation","DROP","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from \"google-maps-react\";\n\nclass MapContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedPlace: {},\n      activeMarker: {},\n      showingInfoWindow: false\n    };\n\n    this.fetchPlaces = this.fetchPlaces.bind(this);\n  }\n  UNSAFE_componentWillMount() {}\n\n  fetchPlaces = (mapProps, map) => {\n    const { google } = mapProps;\n    console.log(google);\n    console.log(map);\n\n    const userLocation = new google.maps.LatLng(this.props.lat, this.props.lng);\n    const request = {\n      location: userLocation,\n      radius: \"500\",\n      type: [\"restaurant\"]\n    };\n\n    const service = new google.maps.places.PlacesService(map);\n    service.nearbySearch(request, getPlaces);\n    let place;\n\n    function getPlaces(results, status) {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        place = Array.from(results);\n        place.map((res, i) => (\n          <Marker\n            key={res.place_id}\n            position={{\n              lat: res.geometry.location.lat,\n              lng: res.geometry.location.lng\n            }}\n            name={res.name}\n            icon={{\n              url: \"../../../assests/map_pin_blue.svg\"\n            }}\n          />\n        ));\n      }\n    }\n  };\n\n  onIconClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        zoom={14}\n        style={{ width: \"100%\", height: \"100%\", position: \"absolute\" }}\n        initialCenter={{\n          lat: this.props.lat,\n          lng: this.props.lng\n        }}\n        onReady={this.fetchPlaces}\n      >\n        {this.fetchPlaces}\n\n        <Marker\n          onClick={this.onIconClick}\n          name={\"You are Here\"}\n          position={{\n            lat: this.props.lat,\n            lng: this.props.lng\n          }}\n          clickable={true}\n          animation={this.props.google.maps.Animation.DROP}\n          icon={{\n            url: \"../../../assests/placeholder.svg\"\n            // This marker is 20 pixels wide by 32 pixels high.\n          }}\n        />\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>\n            <p>{this.state.selectedPlace.name}</p>\n          </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyA8Byy23oFligL0X1_WQYca0ABneIhxOow\"\n})(MapContainer);\n"]},"metadata":{},"sourceType":"module"}